extends layout

include ../scripts/mixins

block layout-content
	script.
		let openView,prevDIM;

		function toggleViews(DIM, pID){
			eID='table-'+DIM
			console.log('eID: ',eID)
			let ele = document.getElementById(eID);
			console.log('ele: ',ele)
			let measure = document.getElementById('measurements');
			console.log('measurements: ',measurements)

			if (prevDIM) {
				document.getElementById(`button-${prevDIM-1}`).classList.remove('dark');
				}

			if (ele.style.display==='block'){
				ele.style.display='none';
				measure.style.display='none';
				document.getElementById('question').style.display='block';
				}
			else {
				if (openView) {
					openView.style.display='none';
					openView='';
					}
				ele.style.display='block';
				measure.style.display='block';
				document.getElementById('question').style.display='none';
				openView=ele;
				// update hidden field value:
				console.log('value of dimension: ',DIM+1)
				document.getElementById('DIM').value = DIM+1
				document.getElementById(`button-${DIM}`).classList.add('dark');
				prevDIM = DIM+1; // cannot use DIM because DIM=0 shows as empty prevDIM
				}
			document.getElementById(`selectedDIMTitle-${DIM}`).innerHTML = `Quality Requirements -  DIM ${DIM+1}`
		}


	h1.MenuTitle Inspect Part 
		span #{lotInfo.partID}


	if ((lotInfo.inspectionData).length>1)
		div(id="selection")
			// if 2 or more dimensions, ask user to pick one for inspection
			br
			h3(id="question").center Which dimension?
			// list each dimension
			h2(width="100%")
				table(rules=all, style="min-width: 30%; text-align:center; table-layout:fixed").center
					tr
						each val,key in partInfo.requirements
							th.tableButton(id=`button-${key}`) 
								a(href="#" style="display:flex; justify-content: center" onclick=`toggleViews(${key}, "${lotInfo.partID}")`) DIM #{key+1}

		each val,key in partInfo.requirements
			div(id=`table-${key}` hidden) 
				table(style="min-width: 30%; text-align:center; table-layout:fixed").tableBorder.center
					-let units='cm'
					tr
						th(colspan="6") 
							h3(id=`selectedDIMTitle-${key}`) Quality Requirements
					tr.medium
						td.topBorder.b Range:
						td.topBorder #{partInfo.requirements[key].lcl} - #{partInfo.requirements[key].ucl} #{units}
						td.leftBorder.topBorder.b Target:
						td.topBorder #{partInfo.requirements[key].target} #{units}
						td.leftBorder.topBorder.b Cpk:
						td.topBorder #{partInfo.requirements[key].cpk} #{units}
		div.h3(id="measurements" hidden) 
			form(action=actionPath method="post" )
				input(type="hidden" id="partID" name="partID" value=lotInfo.partID)
				input(type="hidden" id="DIM" name="DIM" )
				input(type="hidden" id="lotID" name="lotID" value=lotInfo.lotID)
				input(type="hidden" id="PDC" name="PDC" value=PDC)
				table(style='width: 50%, min-width 100px', class="middle")
					-let i=0;
					while i<5
						tr
							td Measurement #{i+1}:
							td
								input(type="number" min=0 step="0.001" id=`m-${i+1}` name="measurements" required )
						-i++
					// submit form
					tr
						td(style="height:25px")
					tr
						td(colspan="2").center
							button(type="submit" class="SubmitButton" ) Continue

	else
		br
		div(id="table-single" ) 
			table(style="min-width: 30%; text-align:center; table-layout:fixed").tableBorder.center
				-let units='cm'
				tr
					th(colspan="6") 
						h3 Quality Requirements - DIM 1
				tr.medium
					td.topBorder.b Range:
					td.topBorder #{partInfo.requirements[0].lcl} - #{partInfo.requirements[0].ucl} #{units}
					td.leftBorder.topBorder.b Target:
					td.topBorder #{partInfo.requirements[0].target} #{units}
					td.leftBorder.topBorder.b Cpk:
					td.topBorder #{partInfo.requirements[0].cpk} #{units}
		br
		div.h3(id="measurements-single") 
			form(action=actionPath method="post" )
				input(type="hidden" id="partID-single" name="partID" value=lotInfo.partID)
				input(type="hidden" id="DIM-single" name="DIM" value=1)
				input(type="hidden" id="lotID-single" name="lotID" value=lotInfo.lotID)
				input(type="hidden" id="PDC-single" name="PDC" value=PDC)
				table(style='width: 50%, min-width 100px', class="middle")
					-let i=0;
					while i<5
						tr
							td Measurement #{i+1}:
							td
								input(type="number" min=0 step="0.001" id=`m-${i+1}` name="measurements" required )
						-i++
					// submit form
					tr
						td(style="height:25px")
					tr
						td(colspan="2").center
							button(type="submit" class="SubmitButton" ) Continue




	+returnNavButtons
